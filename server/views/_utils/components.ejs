<%_
  /***** Don't touch!! *****/
  var _components = {};
_%>
<%_
/**
 * Render a tooltip attribute
 *
 * @param  {String}  title             - Title
 * @param  {String}  [placement="top"] - Placement (top|right|bottom|left)
 */
var tooltipAttr = _components.tooltipAttr = function(title, placement) {
  if (title) {
_%>
  data-toggle="tooltip" data-placement="<%= placement || 'top' %>"
  title="<%= title %>"
<%_ }} _%>
<%_
/**
 * Render css tag
 *
 * @param {String} filePath - Path to css file
 */
var css = _components.css = function(filePath) { _%>
  <link rel="stylesheet" href="<%= static(filePath) %>">
<%_ } _%>
<%_
/**
 * Render js tag
 *
 * @param {String} filePath - Path to js file
 */
var js = _components.js = function(filePath) { _%>
  <script src="<%= static(filePath) %>"></script>
<%_ } _%>
<%_
/**
 * Render error info
 *
 * @param {Object} e - ServerError object.
 */
var errorInfo = _components.errorInfo = function(e) { _%>
  <h1><%= e.status %></h1>
  <hr />

  <%_
    for (var k in e.info) if (e.info.hasOwnProperty(k)) {
      var v = e.info[k];
      if (!v) continue;
  _%>
    <h4>
      <label class="label label-default text-uppercase"><%= k %></label>
      <code><%= v %></code>
    </h4>
  <%_ } _%>
  <h4>
    <label class="label label-default text-uppercase"><%= __("Trace ID") %></label>
    <code><%= traceId %></code>
  </h4>

  <%_ if (CONFIG.MODE !== 'prod' && e.originError) { _%>
    <hr />
    <h1><%= __('Origin Error') %></h1>
    <h4>
      <label class="label label-default text-uppercase"><%= __('Stack__error') %></label>
    </h4>
    <pre><%= e.originError.stack %></pre>
  <%_ } _%>
  <hr />
<%_ } _%>
<%_
/**
 * Generate many `balabala`s
 *
 * @param  {Number} count
 * @return {undefined}
 */
var balabala = _components.balabala = function(count, asText) {
  var balabalaText = []
  for (var i = 0; i < count; i++) {
    for (var j = 0; j < parseInt(Math.random() * 3 + 1); j++) {
      balabalaText.push('bala');
    }

    if (Math.random() > 0.4) {
      balabalaText.push(', ');
    } else if (Math.random() > 0.5) {
      balabalaText.push('. ');
    } else if (Math.random() > 0.6) {
      if (asText) {
        balabalaText.push('\n');
      } else {
        balabalaText.push('<br />');
      }
    } else {
      balabalaText.push(' ');
    }
  }
_%>
  <%_ if (asText) { _%>
    <%- balabalaText.join('').trim() + '.' _%>
  <%_ } else { _%>
    <p><%- balabalaText.join('').trim() + '.' _%></p>
  <%_ } _%>
<%_ } _%>
<%_
/**
 * Dashboard panel in index
 *
 * @param  {String}  handlerPath              - <ModuleName.HandlerName> (e.g. "AuthAPI.signIn")
 * @param  {Object}  [options]
 * @param  {Object}  options.params           - URL params
 * @param  {Object}  options.query            - URL query
 * @param  {String}  [options.col]            - Width by column
 * @param  {String}  [options.icon]           - Fontawsome icon name (e.g. "user")
 * @param  {String}  [options.title]          - Link title
 * @param  {String}  [options.style]          - Color style
 * @param  {String}  [options.extraInfo]      - Extra information in panel.
 * @param  {String}  [options.extraInfoStyle] - Color style for extra information in panel.
 * @retrun {undefined}
 */
var dashboardPanel = _components.dashboardPanel = function(handlerPath, options) {
  options = options || {};
_%>
  <div class="col-xs-12 col-sm-6 col-md-<%= options.col || 4 %>">
    <a class="wat-dashboard-panel" href="<%= urlFor(handlerPath, options) %>">
      <div class="panel panel-<%= options.style || 'default' %>">
        <div class="panel-body text-<%= options.style || 'muted' %>">
          <span class="wat-dashboard-title">
            <%_ if (options.icon)  { _%>
              <i class="fa fa-fw fa-<%= options.icon %>"></i>
            <%_ } _%>
            <%= options.title || '' %>
            <%_ if (options.desc)  { _%>
            <br /><small style="font-size: 18px"><%= options.desc %></small>
            <%_ } _%>
          </span>
          <%_ if (!toolkit.isNothing(options.extraInfo)) { _%>
            <span class="label label-<%= options.extraInfoStyle || 'default' %> wat-dashboard-extra-info"><%= options.extraInfo %></span>
          <%_ } _%>
        </div>
      </div>
    </a>
  </div>
<%_ } _%>
<%_
/**
 * Render a manual tip button and modal
 *
 * @param  {String} title
 * @param  {String} tipTitle
 * @param  {String} tipBody
 * @param  {Object} options
 */
var manualTip = _components.manualTip = function(title, tipTitle, tipBody, options) {
  title    = title    || '';
  tipTitle = tipTitle || title || '';
  tipBody  = tipBody  || '';

  options = options || {};
  options.icon = options.icon || 'question-circle';

  var _id = toolkit.genRandString();
_%>
  <a role="button" class="wat-manual-tip-button" data-toggle="modal" data-target="#tip<%= _id %>">
    <i class="fa fa-fw fa-<%= options.icon %>"></i>
    <%= title %>
  </a>
  <div class="modal fade" id="tip<%= _id %>" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header text-info">
          <i class="fa fa-2x fa-close close" data-dismiss="modal" role="button"></i>
          <h4 class="modal-title text-center wat-manual-tip-title"><i class="fa fa-fw fa-<%= options.icon %>"></i><%- tipTitle %></h4>
        </div>
        <div class="modal-body wat-manual-tip-body">
          <%- tipBody %>
        </div>
      </div>
    </div>
  </div>
<%_ } _%>
<%_
/**
 * Render confirm modal
 */
var confirmModal = _components.confirmModal = function(options) {
  options = options || {};
  options.size = options.size || '';
_%>
  <div class="modal fade" id="watConfirmModal" tabindex="-1" role="dialog">
    <div class="modal-dialog <%= options.size ? 'modal-' + options.size : '' %>" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <i class="fa fa-2x fa-close close" data-dismiss="modal" role="button"></i>
          <h4 class="modal-title"></h4>
        </div>
        <div class="modal-body">
        </div>
        <div class="modal-footer">
          <button wat-confirm-button="close"  type="button" class="hidden btn btn-default" data-dismiss="modal"><%= __('Close') %></button>
          <button wat-confirm-button="cancel" type="button" class="hidden btn btn-default" data-dismiss="modal"><%= __('Cancel') %></button>
          <button wat-confirm-button="ok"     wat-confirm-submit type="button" class="hidden btn btn-primary"><%= __('OK') %></button>
          <button wat-confirm-button="save"   wat-confirm-submit type="button" class="hidden btn btn-primary"><%= __('Save') %></button>
          <button wat-confirm-button="delete" wat-confirm-submit type="button" class="hidden btn btn-danger"><%= __('Delete') %></button>
        </div>
      </div>
    </div>
  </div>
<%_ } _%>
<%_
/**
 * Render infomation modal
 */
var infoModal = _components.infoModal = function(options) {
  options = options || {};
  options.size = options.size || '';
_%>
  <div class="modal fade" id="watInfoModal" tabindex="-1" role="dialog">
    <div class="modal-dialog <%= options.size ? 'modal-' + options.size : '' %>" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <i class="fa fa-2x fa-close close" data-dismiss="modal" role="button"></i>
          <h4 class="modal-title"><%= __('Information') %></h4>
        </div>
        <div class="modal-body">
        </div>
        <div class="modal-footer">
          <button wat-confirm-button="close" type="button" class="btn btn-default" data-dismiss="modal"><%= __('Close') %></button>
        </div>
      </div>
    </div>
  </div>
<%_ } _%>
<%_
/**
 * Render help block
 *
 * @param {String} message - Help block text
 * @param {String} extraClass - Help block text extra classes
 */
var helpBlock = _components.helpBlock = function (message, extraClass) { _%>
  <span class="help-block wat-help <%= extraClass %>"><i class="fa fa-fw fa-info-circle"></i> <%- message %></span>
<%_ } _%>
<%_
/**
 * Render error block
 *
 * @param {String} message - Help block text
 * @param {String} reason  - Error reason (<Error Response>.reason, e.g. "EUserAuth")
 * @param {String} detailMessageTemplate - Help block detail message template (by row)
 */
var errorBlock = _components.errorBlock = function (message, reason, detailMessageTemplate) { _%>
  <span class="help-block hide" api-reason="<%= reason %>" detail-message-template="<%= detailMessageTemplate %>"><i class="fa fa-fw fa-times"></i> <%= message %><p></p></span>
<%_ } _%>
<%_
/**
 * Render go-back Button
 */
var goBackButton = _components.goBackButton = function() { _%>
  <a onclick="core.goBack()" class="btn btn-default">
    <i class="fa fa-fw fa-chevron-left"></i>
  </a>
<%_ } _%>
<%_
/**
 * Render common button
 *
 * @param {Object}  options
 * @param {String}  [options.id]                    - Element id
 * @param {String}  [options.icon=null]             - Fontawsome icon name (e.g. "user")
 * @param {String}  [options.iconRight=false]       - If the icon shows on right.
 * @param {String}  [options.badge=null]            - Badge.
 * @param {String}  [options.title=null]            - Link title
 * @param {String}  [options.type=null]             - Button type (e.g. "aLink|aButton|button|block")
 * @param {String}  [options.size=null]             - Button size (e.g. "xs|sm|md|lg")
 * @param {String}  [options.style="default"]       - Button style (e.g. "default|success|warning|info|danger|link")
 * @param {Object}  [options.width=null]            - Button width
 * @param {Boolean} [options.disabled=false]        - If the button is disabled
 * @param {String}  [options.tip="tooltip"]         - Type of tip (e.g. "tooltip|popover")
 * @param {String}  [options.tipTitle]              - Tip title
 * @param {String}  [options.tipContent]            - Tip content, not available for "tooltip"
 * @param {String}  [options.tipPlacement="top"]    - Tip position
 * @param {Object}  [options.attrs]                 - Button EXTRA attributes
 * @param {String}  [options.class]                 - Button EXTRA classes
 * @param {String}  [options.asText=false]          - Set unclickable and show element as text
 */
var commonClickable = _components.commonClickable = function (options) {
  options       = options       || {};
  options.attrs = options.attrs || {};

  options.attrs['class'] = options.attrs['class'] || '';

  if (options.id) {
    options.attrs['id'] = options.id;
  }

  if (options.asText) {
    delete options.attrs['href'];

  } else {
    if (options.type !== 'aLink') {
      options.attrs['class'] += ' btn btn-' + options.style || 'default';

      if (options.size) {
        options.attrs['class'] += ' btn-' + options.size;
      }

      if (options.type === 'block') {
        options.attrs['class'] += ' btn-block';
      }
    }
  }

  if (options.class) {
    options.attrs['class'] += ' ' + options.class;
  }

  if (options.width) {
    options.attrs['style'] = 'width: ' + options.width + ('number' === typeof options.width ? 'px' : '');
  }

  if (options.tip || options.tipTitle) {
    options.attrs['data-toggle']    = options.tip          || 'tooltip';
    options.attrs['data-placement'] = options.tipPlacement || 'top';

    if (options.tipTitle) {
      options.attrs['data-title'] = options.tipTitle || '';
    }

    if (options.tipContent) {
      options.attrs['data-content'] = options.tipContent;
    }

    if (options.tipTrigger) {
      options.attrs['data-trigger'] = options.tipTrigger;
    }
  }

  if (options.disabled && !options.asText) {
    options.type = 'aLink'
    options.attrs = {
      disabled: 'disabled',
      class   : options.attrs['class'],
      style   : options.attrs['style'],
    }
  }

  var htmlTag = null;
  if (options.asText === true) {
    htmlTag = 'span';
  } else {
    switch (options.type) {
      case 'aLink':
      case 'aButton':
        htmlTag = 'a'
        break;

      case 'button':
      case 'block':
        htmlTag = 'button'
        break;
    }
  }
_%>
  <<%= htmlTag -%>
    <%_ for (var k in options.attrs) if (options.attrs.hasOwnProperty(k) && options.attrs[k]) { %> <%= k %>="<%= options.attrs[k] %>"<%_ } _%>>
    <%_ if (!options.iconRight && options.icon)  { _%>
      <i class="fa fa-fw fa-<%= options.icon %>"></i>
    <%_ } _%>
    <%_ if (options.title) { _%>
      <span><%= options.title %></span>
    <%_ } _%>
    <%_ if (options.iconRight && options.icon)  { _%>
      <i class="fa fa-fw fa-<%= options.icon %>"></i>
    <%_ } _%>
    <%_ if (!toolkit.isNothing(options.badge)) { _%>
      <span class="badge"><%= options.badge %></span>
    <%_ } _%>
  </<%= htmlTag -%>>
<%_ } _%>
<%_
/**
 * Render <button> button.
 *
 * @param {*} * - See `commonClickable`
 */
var button = _components.button = function(options) {
  options = options || {};

  options.type  = options.type  || 'button';
  options.style = options.style || 'default';

  commonClickable(options);
} _%>
<%_
/**
 * Render <a> link.
 *
 * @param {*} *                          - See `commonClickable`
 * @param {String} options.handlerPath   - Handler path for urlFor()
 * @param {Object} [options.params=null] - Params for handler path
 * @param {Object} [options.query=null]  - Params for handler path
 * @param {Boolean} [options.auth=false] - If add the x-auth-token
 */
var aLink = _components.aLink = function(handlerPath, options) {
  if ('undefined' === typeof options) {
    // Shift params
    options     = handlerPath;
    handlerPath = null;
  }

  options = options || {};

  options.attrs = options.attrs || {};
  options.type  = options.type  || 'aLink';
  options.style = options.style || 'default';

  options.attrs['href'] = options.href || '';
  if (handlerPath) {
    options.attrs['href'] = urlFor(handlerPath, options);
  } else {
    options.attrs['role'] = 'button';
  }

  if (options.auth) {
    var leading = options.attrs['href'].indexOf('?') > -1 ? '&' : '?';
    options.attrs['href'] += leading + toolkit.strf('{0}={1}',
      CONFIG._WEB_AUTH_QUERY,
      res.locals.xAuthToken
    );
  }

  commonClickable(options);
} _%>
<%_
/**
 * Render <a> link button.
 *
 * @param {*} * - See `aLink`
 */
var aButton = _components.aButton = function(handlerPath, options) {
  if ('undefined' === typeof options) {
    // Shift params
    options     = handlerPath;
    handlerPath = null;
  }

  options = options || {};

  options.attrs = options.attrs || {};
  options.type  = options.type  || 'aButton';

  aLink(handlerPath, options);
} _%>
<%_
/**
 * Render <a> link in table.
 *
 * @param {*} * - See `aLink`
 */
var tableLink = _components.tableLink = function(handlerPath, options) {
  if ('undefined' === typeof options) {
    // Shift params
    options     = handlerPath;
    handlerPath = null;
  }

  options = options || {};

  options.attrs = options.attrs || {};
  options.type  = options.type  || 'aButton';
  options.size  = options.size  || 'xs';

  aButton(handlerPath, options);
} _%>
<%_
/**
 * Render <a> link text in table.
 *
 * @param {*} * - See `aButton`
 * @param {String} [options.direct='down'] - Dropdown
 */
var tableDropdown = _components.tableDropdown = function(buttons, options) {
  if (!Array.isArray(buttons) || buttons.length === 0) return;

  options       = options       || {};
  options.attrs = options.attrs || {};

  options.class  = (options.class || '') + 'dropdown-toggle';
  options.direct = options.direct || 'down';
  options.style  = options.style  || 'link';

  options.attrs['data-toggle'] = 'dropdown';
_%>
  <div class="hidden-xs drop<%= options.direct %>">
    <% tableLink(options) %>
    <ul class="dropdown-menu dropdown-menu-right">
      <%_
        for (var i = 0; i < buttons.length; i++) {
          var b = buttons[i];
      _%>
        <%_ if (b.type === 'sep') { _%>
          <li role="separator" class="divider"></li>
        <%_ } else { _%>
          <li><%_ components[b.type || 'aLink'].apply(null, b.options); _%></li>
        <%_ } _%>
      <%_ } _%>
    </ul>
  </div>
<%_ } _%>
<%_
/**
 * Render download link button
 *
 * @param {*}      *                         - See `aButton`
 * @param {String} [options.export]          - File type (csv|json|...)
 * @param {String} [options.charset]         - File charset
 * @param {String} [options.fileName='file'] - Download file name
 */
var exportButton = _components.exportButton = function(handlerPath, options) {
  if ('undefined' === typeof options) {
    // Shift params
    options     = handlerPath;
    handlerPath = null;
  }

  options       = options       || {};
  options.attrs = options.attrs || {};
  options.query = toolkit.jsonCopy(options.query || req.query || {});

  options.type  = options.type  || 'aButton';
  options.style = options.style || 'default';

  options.query['export']   = options.export;
  options.query['charset']  = options.charset;
  options.attrs['download'] = options.fileName || __('Export Data');

  options.icon  = toolkit.getSafeValue(options.icon, 'download');
  options.style = toolkit.getSafeValue(options.style, 'default');
  options.title = toolkit.getSafeValue(options.title, __('Export'));
  options.auth  = toolkit.getSafeValue(options.auth, true);

  aButton(handlerPath, options);
} _%>
<%_
/**
 * Render download file link menu
 *
 * @param {*}      *                         - See `aButton`
 * @param {String} [options.download='file'] - Download file name
 */
var exportButtonGroup = _components.exportButtonGroup = function(handlerPath, options) { _%>
  <div class="btn-group hidden-xs">
    <button type="button" class="btn btn-<%= options.style || 'default' %> dropdown-toggle" data-toggle="dropdown">
      <span class="fa fa-w fa-<%= options.icon || 'download' %>"></span>
      <span>
        <%= options.title || __('Export') %>
        <span class="caret"></span>
      </span>
    </button>
    <ul class="dropdown-menu dropdown-menu-right">
      <li>
        <%_
          exportButton(handlerPath, {
            type    : 'aLink',
            fileName: options.fileName,
            icon    : null,
            title   : __('CSV File - For Microsoft Office Excel (Chinese)'),
            export  : 'csv',
            charset : 'gbk',
          })
        _%>
      </li>
      <li>
        <%_
          exportButton(handlerPath, {
            type    : 'aLink',
            fileName: options.fileName,
            icon    : null,
            title   : __('CSV File'),
            export  : 'csv',
          })
        _%>
      </li>
      <li>
        <%_
          exportButton(handlerPath, {
            type    : 'aLink',
            fileName: options.fileName,
            icon    : null,
            title   : __('JSON File'),
            export  : 'json',
          })
        _%>
      </li>
    </ul>
  </div>
<%_ } _%>
<%_
/**
 * Render submit button
 *
 * @param  {*}        options.*                      - See `commonClickable`
 * @param  {String}   handlerPath                    - <ModuleName.HandlerName> (e.g. "AuthAPI.signIn")
 * @param  {Object}   options.for                    - Data tag for calling API.
 * @param  {Object}   options.params                 - URL params
 * @param  {Object}   options.query                  - URL query
 * @param  {Object}   options.body                   - Post body
 * @param  {Boolean}  [options.skipAuth=false]       - Do not sent x-auth-header for API calling.
 * @param  {Boolean}  [options.useCaptcha=false]     - Send CAPTCHA and refresh CAPTCHA image.
 * @param  {Boolean}  [options.triggerByEnter=false] - Send CAPTCHA and refresh CAPTCHA image.
 * @param  {String}   [options.confirm=null]         - Confirm dialog type (e.g. "ok,cancel").
 * @param  {String}   [options.confirmTitle]         - Confirm dialog title template.
 * @param  {String}   [options.confirmMessage]       - Confirm dialog message template.
 * @param  {String}   [options.confirmData=null]     - Confirm dialog target data information.
 * @param  {String}   options.ok                     - Callback function name in `window.pageFn` || `window.apiHooks` after API Calling is succeed.
 * @param  {String}   options.ng                     - Callback function name in `window.pageFn` || `window.apiHooks` after API Calling is failed.
 * @param  {String}   options.okURL                  - Redirect URL when API Calling is succeed.
 * @param  {String}   options.okURLParams            - Params for options.okURL.
 * @param  {String}   options.okURLQuery             - Query for options.okURL.
 * @param  {String}   options.ngURL                  - Redirect URL when API Calling is failed.
 * @param  {String}   options.ngURLParams            - Params for options.ngURL.
 * @param  {String}   options.ngURLQuery             - Query for options.ngURL.
 */
var submitButton = _components.submitButton = function(handlerPath, options) {
  var parts = (handlerPath || '').split('.');
  var moduleName  = parts[0];
  var handlerName = parts[1];

  var routeConfig = ROUTE && ROUTE[moduleName] && ROUTE[moduleName][handlerName];
  if (!routeConfig) {
    throw new Error(toolkit.strf('WAT: No such handler path `{0}`.', handlerPath));
  }

  options = options || {};

  options.attrs = options.attrs || {};

  // Basic request setting
  options.method = routeConfig.method;
  options.for    = options.for || 'submit';

  options.attrs['wat-api-url']    = urlFor(handlerPath);
  options.attrs['wat-api-method'] = options.method;
  options.attrs['wat-api-for']    = options.for;

  if (options.params) options.attrs['wat-api-params'] = JSON.stringify(options.params);
  if (options.query)  options.attrs['wat-api-query']  = JSON.stringify(options.query);
  if (options.body)   options.attrs['wat-api-body']   = JSON.stringify(options.body);

  // Additional request setting
  options.attrs['wat-api-skip-auth']    = toolkit.getSafeValue(options.skipAuth, false);
  options.attrs['wat-use-captcha']      = toolkit.getSafeValue(options.useCaptcha, false);
  options.attrs['wat-trigger-by-enter'] = toolkit.getSafeValue(options.triggerByEnter, false);

  if (options.confirm) {
    options.attrs['wat-confirm'] = options.confirm;

    var confirmData = options.confirmData || __('this data');
    confirmData = toolkit.asArray(confirmData);

    var confirmTitleArgs = [options.confirmTitle].concat(confirmData);
    options.attrs['wat-confirm-title'] = toolkit.strf.apply(null, confirmTitleArgs);

    var confirmMessageArgs = [options.confirmMessage].concat(confirmData);
    options.attrs['wat-confirm-content'] = toolkit.strf.apply(null, confirmMessageArgs);
  }

  // Request checking setting
  if (options.method === 'post' && routeConfig.body) {
    options.attrs['wat-api-body-config'] = JSON.stringify(routeConfig.body);
  }

  if (routeConfig.files) {
    options.attrs['wat-api-files-config'] = JSON.stringify(routeConfig.files);
  }

  // On response setting
  if (!options.ok && !options.okURL) {
    options.ok = 'reload';
  }

  options.attrs['wat-api-ok']            = options.ok          || null;
  options.attrs['wat-api-ok-url']        = options.okURL       || null;
  options.attrs['wat-api-ok-url-params'] = options.okURLParams ? JSON.stringify(options.okURLParams) : null;
  options.attrs['wat-api-ok-url-query']  = options.okURLQuery  ? JSON.stringify(options.okURLQuery)  : null;

  if (!options.ng && !options.ngURL) {
    options.ng = 'alert';
  }

  options.attrs['wat-api-ng']            = options.ng          || null;
  options.attrs['wat-api-ng-url']        = options.ngURL       || null;
  options.attrs['wat-api-ng-url-params'] = options.ngURLParams ? JSON.stringify(options.ngURLParams) : null;
  options.attrs['wat-api-ng-url-query']  = options.ngURLQuery  ? JSON.stringify(options.ngURLQuery)  : null;

  // HTML element setting
  options.type  = options.type  || 'button';
  options.style = options.style || 'primary';
  options.icon  = 'undefined' === typeof options.icon  ? 'check' : options.icon;

  commonClickable(options);
} _%>
<%_
var submitLink = _components.submitLink = function(handlerPath, options) {
  options = options || {};
  options.type = 'aLink';

  components.submitButton(handlerPath, options);
}
_%>
<%_
/**
 * Render save button
 *
 * @param  {*} options.* - See `submitButton`
 */
var saveButton = _components.saveButton = function(handlerPath, options) {
  options = options || {};

  options.attrs = options.attrs || {};

  options.title = options.title || __('Save');
  options.icon  = options.icon  || 'check';

  submitButton(handlerPath, options);
} _%>
<%_
/**
 * Render add button
 *
 * @param {*} options.* - See `submitButton`
 */
var addButton = _components.addButton = function(handlerPath, options) {
  options = options || {};

  options.attrs = options.attrs || {};

  options.title = options.title || __('Add');
  options.icon  = options.icon  || 'plus';

  submitButton(handlerPath, options);
} _%>
<%_
/**
 * Render delete button with confirm for table
 *
 * @param {*} * - See `submitButton`
 */
var tableDeleteButton = _components.tableDeleteButton = function(handlerPath, options) {
  options = options || {};

  options.attrs = options.attrs || {};

  options.for = options.for || 'delete';

  options.confirm        = toolkit.getSafeValue(options.confirm, 'ok,cancel');
  options.confirmTitle   = options.confirmTitle   || __('Deleting <code>{0}</code>');
  options.confirmMessage = options.confirmMessage || __('<p>Are you sure you want to delete the <code>{0}</code>?</p><p class="text-danger">This action cannot be undone.</p>');
  options.confirmData    = options.confirmData    || null;

  options.title    = options.title    || ' ';
  options.tipTitle = options.tipTitle || __('Delete');
  options.style    = options.style    || 'danger';
  options.size     = options.size     || 'xs';
  options.icon     = options.icon     || 'times';

  submitButton(handlerPath, options);
} _%>
<%_
/**
 * Render modify button for table
 *
 * @param  {*} * - See `submitButton`
 */
var tableModifyButton = _components.tableModifyButton = function(handlerPath, options) {
  options = options || {};

  options.attrs = options.attrs || {};

  options.for = options.for || 'modify';

  options.title = options.title || ' ';
  options.style = options.style || 'default';
  options.size  = options.size  || 'xs';

  submitButton(handlerPath, options);
} _%>
<%_
/**
 * Render add button for table
 *
 * @param  {*} * - See `submitButton`
 */
var tableAddButton = _components.tableAddButton = function(handlerPath, options) {
  options = options || {};

  options.attrs = options.attrs || {};

  options.for = options.for || 'add';

  options.title = options.title || ' ';
  options.style = options.style || 'primary';
  options.size  = options.size  || 'xs';
  options.icon  = options.icon  || 'plus';

  submitButton(handlerPath, options);
} _%>
<%_
/**
 * Render Hidden area for submit
 *
 * @param  {String} value   - Hidden value
 * @param  {String} options
 * @param  {String} [options.id]   - Hidden ID.
 * @param  {String} [options.for]  - Data tag for calling API.
 * @param  {String} [options.key]  - Data position for calling API (e.g. "query.id|body.data.id")
 * @param  {String} [options.type] - Type of value
 */
var hidden = _components.hidden = function(value, options) {
  options     = options || {};
  options.for = options.for || 'submit';
_%>
  <input type="hidden" value="<%= value %>"
    <%_ if (options.id)   { _%>id="<%= options.id %>"<%_ } _%>
    <%_ if (options.key)  { _%>wat-data-key="<%= options.key %>"<%_ } _%>
    <%_ if (options.for)  { _%>wat-data-for="<%= options.for %>"<%_ } _%>
    <%_ if (options.type) { _%>wat-data-type="<%= options.type %>"<%_ } _%>
  >
<%_ } _%>
<%_
/**
 * Render Select Options
 *
 * @param  {Object}  values  - Options as [{value: <optionValue>, name: <optionName>}]
 * @param  {Object}  options
 * @param  {Boolean} [options.showPleaseSelect=false] - Show an "Please select..." option
 * @param  {Boolean} [options.showBlank=false]        - Show an "(None)" option
 * @param  {String}  [options.blankMessage=null]      - Show an `options.blankMessage` in blank option instead of "(None)"
 * @param  {String}  [options.blankMessageValue=null] - Value for "(None)" Selection
 * @param  {Boolean} [options.selectedValue]          - Focus on the value
 */
var selectOptions = _components.selectOptions = function(values, options) {
  options = options || {};

  if (!Array.isArray(values) && 'object' === typeof values) {
    var _values = [];
    for (var k in values) if (values.hasOwnProperty(k)) {
      _values.push({
        value: k,
        name : values[k],
      });
    }
    values = _values;
  }

  if (Array.isArray(options.selectedValue)) {
    options.selectedValue = options.selectedValue.reduce(function(acc, x) {
      acc.push((x || '').toString());
      return acc;
    }, []);
  }
_%>
  <%_ if (options.showPleaseSelect) { _%>
    <option disabled <%= !options.selectedValue ? 'selected' : ''%>><%= __('Please select...') %></option>
  <%_ } _%>

  <%_ if (options.showBlank) { _%>
    <option value="<%= options.blankMessageValue || '' %>" <%= (!options.selectedValue && !options.showPleaseSelect) ? 'selected' : ''%>><%= options.blankMessage || __('(None)') %></option>
  <%_ } _%>

  <%_ values.forEach(function(item) { _%>
    <option
      value="<%= item.value %>"
      <% if (Array.isArray(options.selectedValue)) { %>
        <%= options.selectedValue.indexOf((item.value || '').toString()) >= 0 ? 'selected' : '' %>
      <% } else { %>
        <%= (options.selectedValue || '').toString() === (item.value || '').toString() ? 'selected' : '' %>
      <% } %>
    >
      <%= __(item.name) %>
    </option>
  <%_ }) _%>
<%_ } _%>
<%_
/**
 * Render a CAPTCHA area
 *
 * @param  {String} captchaCategory - Captcha category.
 * @param  {Object} options
 * @param  {String} [options.for=submit] - Data tag for calling API.
 */
var captcha = _components.captcha = function(captchaCategory, options) {
  options = options || {};
  var captchaToken = toolkit.genRandString();
  var captchaOpt = {
    captchaToken   : captchaToken,
    captchaCategory: captchaCategory,
  }
  captchaOpt[CONFIG._WEB_AUTH_QUERY] = res.locals.xAuthToken;
_%>
  <div class="input-group">
    <div id="watCaptchaImage" src="<%= urlFor('indexAPI.captcha', {query: captchaOpt}) %>" class="input-group-addon wat-captcha"></div>
    <input id="watCaptcha" type="text" maxlength="4" class="form-control" wat-data-for="<%= options.for || 'submit' %>" wat-data-key="body.captcha">
  </div>
  <%_ components.hidden(captchaToken, {id: 'watCaptchaToken', key: 'body.captchaToken'}) _%>
  <%_ components.errorBlock(__('CAPTCHA is invalid.'), 'EUserCaptcha'); _%>
<%_ } _%>
<%_
/**
 * Render a paging widget when `pageData.pageInfo` is available.
 */
var paging = _components.paging = function() {
  if (!pageData.data || !pageData.data.length) {
    _%>
      <div class="col-xs-12">
        <span class="text-muted text-center wat-dashed-border"><%= __('No Data') %></span>
      </div>
    <%_
    return;
  };

  if (!pageData.pageInfo) return;

  var p = pageData.pageInfo;

  var firstURL  = toolkit.updateQuery(req.originalUrl, {pageNumber: null, pageMarker: null});
  var prevURL   = toolkit.updateQuery(req.originalUrl, {pageNumber: p.pageNumber - 1});
  var nextURL   = toolkit.updateQuery(req.originalUrl, {pageNumber: p.pageNumber + 1});
  var markerURL = toolkit.updateQuery(req.originalUrl, {pageMarker: p.pageMarker});

  function showPage(pNum) {
    var PAD = 2;
    var DOUBLE_PAD = PAD * 2;
    return Math.abs(p.pageNumber - pNum) <= PAD
        || pNum <= DOUBLE_PAD              && p.pageNumber <= DOUBLE_PAD
        || pNum > p.pageCount - DOUBLE_PAD && p.pageNumber > p.pageCount - DOUBLE_PAD
        || pNum === 1
        || pNum === p.pageCount;
  }
_%>
  <div class="col-xs-12 col-md-6">
    <div class="form-inline text-left">
      <select id="watPageSize" class="form-control input-sm hidden-xs">
        <%_
          var hasMatchedPageSize = false;
          var pagingOptions = [];
          [5, 20, 50, 100].forEach(function(countPerPage) {
            pagingOptions.push({
              value: countPerPage,
              name : __('Show {0} records per page', countPerPage),
            });
            if (countPerPage === p.pageSize) {
              hasMatchedPageSize = true;
            }
          });
          if (!hasMatchedPageSize) {
            pagingOptions.unshift({
              value: p.pageSize,
              name : __('Show {0} records per page', p.pageSize),
            });
          }

          components.selectOptions(pagingOptions, {
            selectedValue: p.pageSize
          });
        _%>
      </select>
      <%_ if (p.totalCount) { _%>
        &#12288;
        <span><%= __('Total {0} Records', p.totalCount) %></span>
      <%_ }%>
    </div>
  </div>
  <div class="col-xs-12 col-md-6">
    <nav class="text-right">
      <ul class="pagination pagination-sm wat-pagination">
        <%_ if (p.pageMarker) { _%>
          <%_ if (req.query.pageMarker) { _%>
            <li>
              <a href="<%= firstURL %>">
                <i class="fa fa-fw fa-step-backward"></i>
              </a>
            </li>
          <%_ } else { _%>
            <li class="disabled">
              <a href="#" disabled>
                <i class="fa fa-fw fa-step-backward"></i>
              </a>
            </li>
          <%_ } _%>
        <%_ } else { _%>
          <%_ if (p.pageNumber > 1) { _%>
            <li>
              <a href="<%= prevURL %>">
                <i class="fa fa-fw fa-arrow-left"></i>
              </a>
            </li>
          <%_ } else { _%>
            <li class="disabled">
              <a href="#" disabled>
                <i class="fa fa-fw fa-arrow-left"></i>
              </a>
            </li>
          <%_ } _%>
        <%_ } _%>

        <%_
          for (var i = 1; i <= p.pageCount; i++ ) {
            var pageURL = toolkit.updateQuery(req.originalUrl, {pageNumber: i})
        _%>
          <%_ if (showPage(i)) { _%>
            <li class="<%= p.pageNumber === i ? 'active' : '' %>">
              <a href="<%= pageURL %>"><strong><%= i %></strong></a>
            </li>
          <%_ } else { _%>
            <%_ if (showPage(i - 1)) { _%>
              <li class="disabled">
                <span><strong>...</strong></span>
              </li>
            <%_ } _%>
          <%_ } _%>
        <%_ } _%>


        <%_ if (p.pageCount) { _%>
          <%_ if (p.pageNumber < p.pageCount) { _%>
            <li>
              <a href="<%= nextURL %>">
                <i class="fa fa-fw fa-arrow-right"></i>
              </a>
            </li>
          <%_ } else { _%>
            <li class="disabled">
              <a href="#" disabled>
                <i class="fa fa-fw fa-arrow-right"></i>
              </a>
            </li>
          <%_ } _%>
        <%_ } else { _%>
          <%_ if (p.pageMarker && p.count >= p.pageSize) { _%>
            <li>
              <a href="<%= markerURL %>">
                <i class="fa fa-fw fa-arrow-right"></i>
              </a>
            </li>
          <%_ } else if (p.count >= p.pageSize) { _%>
            <li>
              <a href="<%= nextURL %>">
                <i class="fa fa-fw fa-arrow-right"></i>
              </a>
            </li>
          <%_ } else { _%>
            <li class="disabled">
              <a href="#" disabled>
                <i class="fa fa-fw fa-arrow-right"></i>
              </a>
            </li>
          <%_ } _%>
        <%_ } _%>
      </ul>
    </nav>
  </div>
<%_ } _%>
<%_
/**
 * Render a progress bar
 * Work with submit button
 *
 * @param {Object}  options
 * @param {String}  [options.id]              - Element id
 * @param {String}  [options.style="success"] - Progress bar style (e.g. "success|warning|info|danger")
 * @param {Object}  [options.for]             - Progress tag.
 * @param {Object}  [options.height=null]     - Progress bar height
 * @param {Object}  [options.hide=false]      - Hide Progress bar
 */
var progressBar = _components.progressBar = function(options) {
  options = options || {};

  options.for = options.for || 'submit';

  options.style = options.style || 'success';
_%>
  <div class="progress" <%= options.hide ? 'hidden' : '' %>
    wat-progress-for="<%= options.for %>"
    <%_ if (options.id) { _%>id="<%= options.id %>"<%_ } _%>
    <%_ if (options.height) { _%>style="height: <%= options.height %>px"<%_ } _%>
  >
    <div class="progress-bar progress-bar-<%= options.style %> progress-bar-striped active"
    ></div>
  </div>
<%_ } _%>
<%_
/**
 * Render a search bar
 */
var fuzzySearch = _components.fuzzySearch = function(options) {
  options = options || {};
  if ('undefined' === typeof options.size) {
    options.size = 'sm';
  }
_%>
  <div class="input-group">
    <span class="input-group-addon"><i class="fa fa-search"></i></span>
    <input id="watFuzzySearchInput" type="text" maxlength="50" class="form-control text-danger <%= options.size ? 'input-' + options.size : '' %>" placeholder="<%= __('Input to Search...') %>" value="<%= req.query._fuzzySearch || '' %>">
    <span class="input-group-btn">
      <%_
        button({
          id  : 'watFuzzySearchClear',
          icon: 'times',
          size: options.size,
        })
      _%>
      <%_
        button({
          id   : 'watFuzzySearchButton',
          title: __('Search'),
          size: options.size,
        })
      _%>
    </span>
  </div>
<%_ } _%>
<%_
/**
 * Render a order by button
 */
var orderButton = _components.orderButton = function(options) {
  options = options || {};
  options.size = options.size || 'xs';

  options.icon = 'sort';
  if (req.query.orderBy === options.orderBy) {
    options.style = 'danger';
    options.icon += '-' + req.query.orderMethod.toLowerCase();
  }

  var nextOrderOpt = null;
  if (req.query.orderBy === options.orderBy) {
    switch (req.query.orderMethod) {
      case 'desc':
        nextOrderOpt = {
          orderBy    : options.orderBy,
          orderMethod: 'asc',
        }
        break;

      case 'asc':
        nextOrderOpt = {
          orderBy    : null,
          orderMethod: null,
        }
        break;

      default:
        nextOrderOpt = {
          orderBy    : options.orderBy,
          orderMethod: 'desc',
        }
        break;
    }
  } else {
    nextOrderOpt = {
      orderBy    : options.orderBy,
      orderMethod: 'desc',
    }
  }

  nextOrderOpt.pageNumber = null;
  options.href = toolkit.updateQuery(req.originalUrl, nextOrderOpt, true);

  aButton(options);
} _%>
<%_
/**
 * Render a filter button
 */
var filterButton = _components.filterButton = function(options) {
  options = options || {};

  if ('undefined' === typeof options.size) {
    options.size = 'sm';
  }
_%>
  <div class="btn-group">
    <%_
      button({
        id  : 'watFilterClear',
        icon: 'times',
        size: options.size,
      })
    _%>
    <%_
      button({
        id   : 'watFilterButton',
        title: __('Filter'),
        style: 'info',
        icon : 'filter',
        size: options.size,
      })
    _%>
  </div>
<%_ } _%>
<%_
/**
 * Render a text filter area
 * Work with `filterButton`
 *
 * @param {Object} options
 * @param {String} options.filterName
 * @param {String} options.title
 * @param {String} options.placeholder
 * @param {String} [options.width=125]
 */
var filterText = _components.filterText = function(options) {
  options = options || {};

  options.width = options.width || 100;

  if ('undefined' === typeof options.size) {
    options.size = 'sm';
  }
_%>
  <div class="form-group">
    <%_ if (options.title) { _%><label><%= options.title %></label><%_ } _%>
    <input type="text" class="form-control text-danger <%= options.size ? 'input-' + options.size : '' %>" wat-filter="<%= options.filterName %>" style="width: <%= options.width.toString().slice(-1) === '%' ? options.width : options.width + 'px;' %>" placeholder="<%= options.placeholder || '' %>" value="<%= req.query[options.filterName] || '' %>">
  </div>
<%_ } _%>
<%_
/**
 * Render a select filter area
 * Work with `filterButton`
 *
 * @param  {Object}  values  - Options as <optionValue>:<optionName>
 * @param  {Object}  options
 * @param  {String}  options.filterName               - Filter name
 * @param  {String}  [options.title=null]             - Show title
 * @param  {Boolean} [options.showPleaseSelect=false] - Show an "Please select..." option
 * @param  {Boolean} [options.showBlank=false]        - Show an "(None)" option
 * @param  {String}  [options.blankMessage=null]      - Show an `options.blankMessage` in blank option instead of "(None)"
 * @param  {String}  [options.blankMessageValue=null] - Value for "(None)" Selection
 * @param  {Boolean} [options.selectedValue]          - Focus on the value
 */
var filterSelect = _components.filterSelect = function(values, options) {
  options = options || {};
  if (!options.selectedValue) {
    options.selectedValue = req.query[options.filterName] || null;
  }
  if ('undefined' === typeof options.size) {
    options.size = 'sm';
  }

  options.width = options.width || 100;
_%>
  <div class="form-group">
    <%_ if (options.title) { _%>
      <label><%= options.title %></label>
    <%_ } _%>
    <select class="form-control text-danger <%= options.size ? 'input-' + options.size : '' %>" wat-filter="<%= options.filterName %>" style="width: <%= options.width.toString().slice(-1) === '%' ? options.width : options.width + 'px;' %>">
      <%_ components.selectOptions(values, options) _%>
    </select>
  </div>
<%_ } _%>
<%_
/**
 * Render a table filter hint row
 */
var tableFilterHintRow = _components.tableFilterHintRow = function(options) {
  if (toolkit.isNothing(req.query)) return;

  options = options || {};
  options.displayText = options.displayText || {};

  options.displayText.id           = options.displayText.id           || ['ID'];
  options.displayText._fuzzySearch = options.displayText._fuzzySearch || ['Fuzzy Search'];
  options.displayText.orderMethod  = options.displayText.orderMethod  || ['Order method', {asc: 'ASC', desc: 'DESC'}];

  for (var k in options.displayText) if (options.displayText.hasOwnProperty(k)) {
    options.displayText[k] = toolkit.asArray(options.displayText[k]);
  }

  if (toolkit.isNothing(options.displayText.orderBy)) {
    options.displayText.orderBy = ['Order field'];
  } else if ('object' === typeof options.displayText.orderBy[0]) {
    options.displayText.orderBy.unshift('Order field');
  }
_%>
  <tr>
    <td colspan="100%" class="wat-td-middle">
      <%_ for (var k in req.query) if (req.query.hasOwnProperty(k)) { _%>
        <%_
          var v = req.query[k];

          var nextOrderOpt = {
            pageNumber: null,
          };
          nextOrderOpt[k] = null;

          if (k === 'orderBy' || k === 'orderMethod') {
            nextOrderOpt.orderBy     = null;
            nextOrderOpt.orderMethod = null;
          }

          var nextURL = toolkit.updateQuery(req.originalUrl, nextOrderOpt, true);
        _%>
        <a class="btn btn-danger btn-xs wat-round-btn" href="<%= nextURL %>">
          <% var displayK = (options.displayText[k] || [])[0] || k %>
          <strong><%= __(displayK) %></strong>
          :
          <i>
            <%_ if (Array.isArray(v)) { _%>
              <%
                var vList = [];
                v.forEach(function(_v) {
                  var displayV = ((options.displayText[k] || [])[1] || {})[_v] || _v
                  vList.push(__(displayV));
                })
              %>
              <%= vList.join(', ') %>
            <%_ } else { _%>
              <% var displayV = ((options.displayText[k] || [])[1] || {})[v] || v %>
              <%= __(displayV) %>
            <%_ } _%>
          </i>
          <i class="fa fa-fw fa-times-circle"></i>
        </a>
      <%_ } _%>
    </td>
  </tr>
<%_ } _%>
<%_
/**
 * Render a Table for Key-Value data
 * @param  {Object|String} kv      - Key-Value data
 * @param  {Object}        options
 */
var kvTable = _components.kvTable = function(kv, options) {
  if ('string' === typeof kv) {
    kv = JSON.parse(kv);
  } else {
    kv = kv || {};
  }

  options = options || {};
_%>
  <table>
    <tbody style="vertical-align: top;">
      <% for (var k in kv) if (kv.hasOwnProperty(k)) { _%>
        <tr>
            <td><code><%= k %></code></td>
            <td>:&#12288;</td>
            <td><pre class="wat-plain-text"><%= JSON.stringify(kv[k], null, 2) %></pre></td>
        </tr>
      <%_ } _%>
    </tbody>
  </table>
<%_ } _%>
<%_
/**
 * Render a length limited span with tooltip
 *
 * @param {String}  text
 * @param {Integer=30} maxLength
 * @param {String="span"}  htmlTag
 */
var limitedSpan = _components.limitedSpan = function(text, maxLength, htmlTag) {
  htmlTag   = htmlTag   || 'span'

  var displayText = toolkit.limitText(text, maxLength);

  var tooltipTitle = null;
  if (displayText !== text) {
    tooltipTitle = text;
  }
_%><<%= htmlTag %> <% if (tooltipTitle) { %>data-toggle="tooltip" data-placement="top" title="<%= tooltipTitle %>"<% } %>><%= displayText %></<%= htmlTag %>><%_ } _%>
<%_
/**
 * Render a copy button
 *
 * @param {String} text
 * @param {Object} options
 */
var copyButton = _components.copyButton = function(text, options) {
  if (!text) return;

  options = options || {};
  options.style = options.style || 'link';
  options.size  = options.size || 'xs';

  options.attrs = options.attrs || {};
  options.attrs['data-clipboard-text'] = text;
  options.attrs['copied-title']        = __('copied');

  if ('undefined' === typeof options.icon) {
    options.icon = 'clipboard';
  }

  button(options);
};
_%>
<%_
  /***** Don't touch!! *****/
  // Collect all used components
  for (var name in _components) if (_components.hasOwnProperty(name)) {
    var f = _components[name];

    components[name] = (function(funcName) {
      return function() {
        _componentsInPage[funcName] = true;

        var args = Array.prototype.slice.call(arguments);
        _components[funcName].apply(null, args);
      }
    })(name);
  }
_%>
