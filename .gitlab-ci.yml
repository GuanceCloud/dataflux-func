stages:
  - build

variables:
  OSS_WORKDIR              : dataflux-func
  OSS_RESOURCE_BASE_URL    : oss://${ZY_STATIC_OSS_BUCKET}/${OSS_WORKDIR}/resource
  OSS_RESOURCE_DEV_BASE_URL: oss://${ZY_STATIC_OSS_BUCKET}/${OSS_WORKDIR}/resource-dev
  OSS_PORTABLE_BASE_URL    : oss://${ZY_STATIC_OSS_BUCKET}/${OSS_WORKDIR}/portable
  CDN_REFRESH_PATH         : static.dataflux.cn/${OSS_WORKDIR}/

  IMAGE                    : dataflux-func
  IMAGE_PRIVATE            : registry.jiagouyun.com/middlewares/dataflux-func
  IMAGE_PUBLIC             : pubrepo.jiagouyun.com/dataflux-func/dataflux-func
  IMAGE_GZIP_FILE          : dataflux-func.tar.gz
  DOCKER_STACK_EXAMPLE_FILE: docker-stack.example.yaml
  RUN_DOCKER_STACK_FILE    : run-docker-stack.sh
  VERSION_FILE             : version

  PROJECT              : dataflux-func
  FUNC_PKG_URL         : https://static.dataflux.cn/dataflux-func/market/packages/_dataflux/dataflux-func-latest.func-pkg
  FUNC_REQUIREMENTS_URL: https://static.dataflux.cn/dataflux-func/market/packages/_dataflux/requirements.txt

# 开发版发布
#   主要用于驻云SaaS版开发
dev:
  stage: build
  only:
    - dev
  script:
    - python echo-image-info.py > image-info.json
    - mkdir -p func-pkg; wget ${FUNC_PKG_URL} -O func-pkg/dataflux.func-pkg; # 下载DataFlux内置库
    - wget ${FUNC_REQUIREMENTS_URL} -O requirements-dataflux.txt;            # 下载DataFlux内置库依赖索引
    - docker build -t ${IMAGE}:${CI_COMMIT_REF_NAME} -f Dockerfile.dataflux .
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:$CI_COMMIT_REF_NAME
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBLIC}:dev
    - docker push ${IMAGE_PRIVATE}:$CI_COMMIT_REF_NAME
    - docker push ${IMAGE_PUBLIC}:dev
    - tools/ossutil64 cp ${DOCKER_STACK_EXAMPLE_FILE} ${OSS_RESOURCE_DEV_BASE_URL}/${DOCKER_STACK_EXAMPLE_FILE} -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${RUN_DOCKER_STACK_FILE}     ${OSS_RESOURCE_DEV_BASE_URL}/${RUN_DOCKER_STACK_FILE}     -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - pip install -r tools/requirements.txt
    - python tools/cdn-refresh-tool.py Directory ${CDN_REFRESH_PATH} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
  tags:
    - middleware

# 正式发布
#   版本号自动拆分推送为 "x", "x.y", "x.y.z", "latest"
singleton:
  stage: build
  only:
    - /^\d+\.\d+\.\d+$/      # 如：1.2.3
    - /^\d+\.\d+\.\d+rc\d+$/ # 如：1.2.3rc4
  script:
    - python echo-image-info.py > image-info.json
    - echo ${CI_COMMIT_REF_NAME} > ${VERSION_FILE}
    - V_PARTS=(${CI_COMMIT_REF_NAME//[\.]/ })
    - V_MAJOR=${V_PARTS[0]}
    - V_MAJOR_MINOR=${V_PARTS[0]}.${V_PARTS[1]}
    - V_MAJOR_MINOR_PATCH=${V_PARTS[0]}.${V_PARTS[1]}.${V_PARTS[2]}
    - docker build -t ${IMAGE}:${CI_COMMIT_REF_NAME} -f Dockerfile.singleton .
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:latest
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:${V_MAJOR}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:${V_MAJOR_MINOR}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:${V_MAJOR_MINOR_PATCH}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBLIC}:latest
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBLIC}:${V_MAJOR}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBLIC}:${V_MAJOR_MINOR}
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PUBLIC}:${V_MAJOR_MINOR_PATCH}
    - docker push ${IMAGE_PRIVATE}:latest
    - docker push ${IMAGE_PRIVATE}:${V_MAJOR}
    - docker push ${IMAGE_PRIVATE}:${V_MAJOR_MINOR}
    - docker push ${IMAGE_PRIVATE}:${V_MAJOR_MINOR_PATCH}
    - docker push ${IMAGE_PUBLIC}:latest
    - docker push ${IMAGE_PUBLIC}:${V_MAJOR}
    - docker push ${IMAGE_PUBLIC}:${V_MAJOR_MINOR}
    - docker push ${IMAGE_PUBLIC}:${V_MAJOR_MINOR_PATCH}
    - docker save ${IMAGE_PUBLIC}:latest | gzip > ${IMAGE_GZIP_FILE}
    - tools/ossutil64 cp ${DOCKER_STACK_EXAMPLE_FILE} ${OSS_RESOURCE_BASE_URL}/${DOCKER_STACK_EXAMPLE_FILE} -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${RUN_DOCKER_STACK_FILE}     ${OSS_RESOURCE_BASE_URL}/${RUN_DOCKER_STACK_FILE}     -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${IMAGE_GZIP_FILE}           ${OSS_PORTABLE_BASE_URL}/${IMAGE_GZIP_FILE}           -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${DOCKER_STACK_EXAMPLE_FILE} ${OSS_PORTABLE_BASE_URL}/${DOCKER_STACK_EXAMPLE_FILE} -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${VERSION_FILE}              ${OSS_PORTABLE_BASE_URL}/${VERSION_FILE}              -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - pip install -r tools/requirements.txt
    - python tools/cdn-refresh-tool.py Directory ${CDN_REFRESH_PATH} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
  tags:
    - middleware

# DataFlux同捆发布
#   主要用于驻云SaaS版预发/生产环境
dataflux:
  stage: build
  only:
    - /^pre_\d+_\d+$/     # 如：pre_20190101_01
    - /^release_\d+_\d+$/ # 如：release_20190101_01
  script:
    - python echo-image-info.py > image-info.json
    - mkdir -p func-pkg; wget ${FUNC_PKG_URL} -O func-pkg/dataflux.func-pkg; # 下载DataFlux内置库
    - wget ${FUNC_REQUIREMENTS_URL} -O requirements-dataflux.txt;            # 下载DataFlux内置库依赖索引
    - docker build -t ${IMAGE}:${CI_COMMIT_REF_NAME} -f Dockerfile.dataflux .
    - docker tag ${IMAGE}:${CI_COMMIT_REF_NAME} ${IMAGE_PRIVATE}:$CI_COMMIT_REF_NAME
    - docker push ${IMAGE_PRIVATE}:$CI_COMMIT_REF_NAME
  tags:
    - middleware

# PaaS 预发
datafluxPaaS_prev:
  stage: build
  only:
    - /\d+\.\d+\.\d+\.\d+-\w+-prev/ # 如：1.10.49.1-c2f4e3b-prev
  script:
    - python echo-image-info.py > image-info.json
    - mkdir -p func-pkg; wget ${FUNC_PKG_URL} -O func-pkg/dataflux.func-pkg; # 下载DataFlux内置库
    - wget ${FUNC_REQUIREMENTS_URL} -O requirements-dataflux.txt;            # 下载DataFlux内置库依赖索引
    - V=(${CI_COMMIT_REF_NAME//[\.-]/ })
    - VDIR=${V[0]}.${V[1]}.${V[2]}.${V[3]}
    - REPO=dataflux-prev/$VDIR
    - TAG=${PROJECT}-${V[4]}
    - docker build -t $REPO:$TAG -f Dockerfile.dataflux .
    - docker tag $REPO:$TAG pubrepo.jiagouyun.com/$REPO:$TAG
    - docker push pubrepo.jiagouyun.com/$REPO:$TAG
  tags:
    - middleware

# PaaS 生产
datafluxPaaS_prod:
  stage: build
  only:
    - /\d+\.\d+\.\d+-\w+-\d+-prod/ # 如： 1.9.48-356017d-1600314708-prod
  script:
    - python echo-image-info.py > image-info.json
    - mkdir -p func-pkg; wget ${FUNC_PKG_URL} -O func-pkg/dataflux.func-pkg; # 下载DataFlux内置库
    - wget ${FUNC_REQUIREMENTS_URL} -O requirements-dataflux.txt;            # 下载DataFlux内置库依赖索引
    - V=(${CI_COMMIT_REF_NAME//[\.-]/ })
    - VDIR=${V[0]}.${V[1]}.${V[2]}
    - REPO=dataflux/$VDIR
    - TAG=${PROJECT}-${V[3]}-${V[4]}
    - docker build -t $REPO:$TAG -f Dockerfile.dataflux .
    - docker tag $REPO:$TAG pubrepo.jiagouyun.com/$REPO:$TAG
    - docker push pubrepo.jiagouyun.com/$REPO:$TAG
  tags:
    - middleware
