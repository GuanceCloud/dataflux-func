stages:
  - build
  - uploadToOSS
  - deploy

variables:
  OSS_WORKDIR              : dataflux-func
  OSS_PORTABLE_BASE_URL    : oss://${ZY_STATIC_OSS_BUCKET}/${OSS_WORKDIR}/portable
  OSS_PORTABLE_BASE_URL_DEV: oss://${ZY_STATIC_OSS_BUCKET}/${OSS_WORKDIR}/portable-dev
  CDN_REFRESH_PATH         : ${ZY_STATIC_SITE}/${OSS_WORKDIR}/portable/
  CDN_REFRESH_PATH_DEV     : ${ZY_STATIC_SITE}/${OSS_WORKDIR}/portable-dev/

  IMAGE          : dataflux-func
  IMAGE_GZIP_FILE: dataflux-func.tar.gz

  DOCKER_STACK_EXAMPLE_FILE : docker-stack.example.yaml
  DOCKER_SERVICE_FILE       : docker.service
  DOWNLOAD_PORTABLE_FILE    : download-portable.sh
  DOWNLOAD_PORTABLE_FILE_DEV: download-portable-dev.sh
  RUN_PORTABLE_FILE         : run-portable.sh
  IMAGE_LIST_FILE           : image-list
  IMAGE_LIST_FILE_DEV       : image-list-dev
  IMAGE_LIST_FILE_X86_64    : image-list-x86_64
  IMAGE_LIST_FILE_AARCH64   : image-list-aarch64
  VERSION_FILE              : version

  PROJECT: dataflux-func

# ========== 构建镜像 ==========
portable_dev:
  stage: build
  only:
    - dev
  script:
    # 开发版只需支持amd64
    - python echo-image-info.py > image-info.json
    - docker buildx build
      --platform linux/amd64
      -t ${IMAGE_PUBLIC}-dev:latest
      -f Dockerfile-singleton .
      --load
    - docker save ${IMAGE_PUBLIC}-dev:latest | gzip > ${IMAGE_GZIP_FILE}
    - tools/ossutil64 cp
      ${IMAGE_GZIP_FILE} ${OSS_PORTABLE_BASE_URL_DEV}/x86_64/${IMAGE_GZIP_FILE} -f
      -e ${ZY_STATIC_OSS_ENDPOINT}
      -i ${ZY_STATIC_OSS_AK_ID}
      -k ${ZY_STATIC_OSS_AK_SECRET};
  tags:
    - cloudcare-multiarch

portable_amd64:
  stage: build
  only:
    - /^\d+\.\d+\.\d+$/ # 如：1.2.3
  script:
    # 单独构建amd64版本用于导出
    - python echo-image-info.py > image-info.json
    - docker buildx build
      --platform linux/amd64
      -t ${IMAGE_PUBLIC}:latest
      -f Dockerfile-singleton .
      --load
    - docker save ${IMAGE_PUBLIC}:latest | gzip > ${IMAGE_GZIP_FILE}
    - tools/ossutil64 cp ${IMAGE_GZIP_FILE}
      ${OSS_PORTABLE_BASE_URL}/x86_64/${IMAGE_GZIP_FILE} -f
      -e ${ZY_STATIC_OSS_ENDPOINT}
      -i ${ZY_STATIC_OSS_AK_ID}
      -k ${ZY_STATIC_OSS_AK_SECRET};
  tags:
    - cloudcare-multiarch

portable_arm64:
  stage: build
  only:
    - /^\d+\.\d+\.\d+$/ # 如：1.2.3
  script:
    # 单独构建arm64版本用于导出
    - python echo-image-info.py > image-info.json
    - docker buildx build
      --platform linux/arm64
      -t ${IMAGE_PUBLIC}-arm64:latest
      -f Dockerfile-singleton .
      --load
    - docker save ${IMAGE_PUBLIC}-arm64:latest | gzip > ${IMAGE_GZIP_FILE}
    - tools/ossutil64 cp ${IMAGE_GZIP_FILE}
      ${OSS_PORTABLE_BASE_URL}/aarch64/${IMAGE_GZIP_FILE} -f
      -e ${ZY_STATIC_OSS_ENDPOINT}
      -i ${ZY_STATIC_OSS_AK_ID}
      -k ${ZY_STATIC_OSS_AK_SECRET};
  tags:
    - cloudcare-multiarch

singleton_release:
  stage: build
  only:
    - /^\d+\.\d+\.\d+$/ # 如：1.2.3
  script:
    # 计算版本号
    - V_PARTS=(${CI_COMMIT_REF_NAME//[\.]/ })
    - V_MAJOR=${V_PARTS[0]}
    - V_MAJOR_MINOR=${V_PARTS[0]}.${V_PARTS[1]}
    - V_MAJOR_MINOR_PATCH=${V_PARTS[0]}.${V_PARTS[1]}.${V_PARTS[2]}
    # 构建/推送多架构版本
    - python echo-image-info.py > image-info.json
    - docker buildx build
      --platform linux/amd64,linux/arm64
      -t ${IMAGE_PRIVATE}:latest
      -t ${IMAGE_PRIVATE}:${V_MAJOR}
      -t ${IMAGE_PRIVATE}:${V_MAJOR_MINOR}
      -t ${IMAGE_PRIVATE}:${V_MAJOR_MINOR_PATCH}
      -t ${IMAGE_PUBLIC}:latest
      -t ${IMAGE_PUBLIC}:${V_MAJOR}
      -t ${IMAGE_PUBLIC}:${V_MAJOR_MINOR}
      -t ${IMAGE_PUBLIC}:${V_MAJOR_MINOR_PATCH}
      -f Dockerfile-singleton .
      --push
    # 推送生产Helm
    - sh build-charts.sh ${V_MAJOR_MINOR_PATCH} ${V_MAJOR_MINOR_PATCH} func-prod-chart
  tags:
    - cloudcare-multiarch

guance_testing:
  stage: build
  only:
    - dev
  script:
    # 开发版只需支持amd64
    - python echo-image-info.py > image-info.json
    - docker buildx build
      --platform linux/amd64
      -t ${IMAGE_PRIVATE}:${CI_COMMIT_REF_NAME}
      -f Dockerfile-guance .
      --push
  tags:
    - cloudcare-multiarch

guance_release:
  stage: build
  only:
    - /^pre_\d+_\d+$/     # 如：pre_20190101_01
    - /^release_\d+_\d+$/ # 如：release_20190101_01
  script:
    # 下载观测云内置脚本集
    - mkdir -p builtin-script-sets
    - wget ${BUILTIN_SCRIPT_SET_URL_DATAFLUX} -O builtin-script-sets/dataflux.zip; # 旧版
    - wget ${BUILTIN_SCRIPT_SET_URL_GUANCE}   -O builtin-script-sets/guance.zip;   # 新版
    # 构建/推送多架构版本
    - python echo-image-info.py > image-info.json
    - docker buildx build
      --platform linux/amd64,linux/arm64
      -t ${IMAGE_PRIVATE}:${CI_COMMIT_REF_NAME}
      -t ${IMAGE_PUBLIC}:${CI_COMMIT_REF_NAME}
      -f Dockerfile-guance .
      --push
  tags:
    - cloudcare-multiarch

guancePaaS_preview:
  stage: build
  only:
    - /\d+\.\d+\.\d+\.\d+-\w+-prev/ # 如：1.10.49.1-c2f4e3b-prev
  script:
    # 下载观测云内置脚本集
    - mkdir -p builtin-script-sets
    - wget ${BUILTIN_SCRIPT_SET_URL_DATAFLUX} -O builtin-script-sets/dataflux.zip; # 旧版
    - wget ${BUILTIN_SCRIPT_SET_URL_GUANCE}   -O builtin-script-sets/guance.zip;   # 新版
    # 计算版本号
    - V=(${CI_COMMIT_REF_NAME//[\.-]/ })
    - VDIR=${V[0]}.${V[1]}.${V[2]}.${V[3]}
    - REPO=dataflux-prev/$VDIR
    - TAG=${PROJECT}-${V[4]}
    # 构建/推送多架构版本
    - python echo-image-info.py > image-info.json
    - docker buildx build
      --platform linux/amd64,linux/arm64
      -t pubrepo.jiagouyun.com/$REPO:$TAG
      -f Dockerfile-guance .
      --push
  tags:
    - cloudcare-multiarch

guancePaaS_release:
  stage: build
  only:
    - /\d+\.\d+\.\d+-\w+-\d+-prod/ # 如： 1.9.48-356017d-1600314708-prod
  script:
    # 下载观测云内置脚本集
    - mkdir -p builtin-script-sets
    - wget ${BUILTIN_SCRIPT_SET_URL_DATAFLUX} -O builtin-script-sets/dataflux.zip; # 旧版
    - wget ${BUILTIN_SCRIPT_SET_URL_GUANCE}   -O builtin-script-sets/guance.zip;   # 新版
    # 计算版本号
    - V=(${CI_COMMIT_REF_NAME//[\.-]/ })
    - VDIR=${V[0]}.${V[1]}.${V[2]}
    - REPO=dataflux/$VDIR
    - TAG=${PROJECT}-${V[3]}-${V[4]}
    # 构建/推送多架构版本
    - python echo-image-info.py > image-info.json
    - docker buildx build
      --platform linux/amd64,linux/arm64
      -t pubrepo.jiagouyun.com/$REPO:$TAG
      -f Dockerfile-guance .
      --push
  tags:
    - cloudcare-multiarch

# ========== 携带版文件上传到 OSS ==========

portableFile_dev:
  stage: uploadToOSS
  only:
    - dev
  script:
    # 输出版本号
    - echo ${CI_COMMIT_REF_NAME} > ${VERSION_FILE}
    # 上传文件
    - tools/ossutil64 cp portable/${DOCKER_STACK_EXAMPLE_FILE}  ${OSS_PORTABLE_BASE_URL_DEV}/${DOCKER_STACK_EXAMPLE_FILE} -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp portable/${DOCKER_SERVICE_FILE}        ${OSS_PORTABLE_BASE_URL_DEV}/${DOCKER_SERVICE_FILE}       -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp portable/${DOWNLOAD_PORTABLE_FILE_DEV} ${OSS_PORTABLE_BASE_URL_DEV}/${DOWNLOAD_PORTABLE_FILE}    -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp portable/${RUN_PORTABLE_FILE}          ${OSS_PORTABLE_BASE_URL_DEV}/${RUN_PORTABLE_FILE}         -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp portable/${IMAGE_LIST_FILE_DEV}        ${OSS_PORTABLE_BASE_URL_DEV}/x86_64/${IMAGE_LIST_FILE}    -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${VERSION_FILE}                        ${OSS_PORTABLE_BASE_URL_DEV}/${VERSION_FILE}              -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    # 刷新 CDN 缓存
    - pip install -r tools/requirements.txt
    - python tools/cdn-refresh-tool.py Directory ${CDN_REFRESH_PATH_DEV}
      -i ${ZY_STATIC_OSS_AK_ID}
      -k ${ZY_STATIC_OSS_AK_SECRET}
  tags:
    - cloudcare-multiarch

portableFile_release:
  stage: uploadToOSS
  only:
    - /^\d+\.\d+\.\d+$/ # 如：1.2.3
  script:
    # 输出版本号
    - echo ${CI_COMMIT_REF_NAME} > ${VERSION_FILE}
    # 上传文件
    - tools/ossutil64 cp portable/${DOCKER_STACK_EXAMPLE_FILE}  ${OSS_PORTABLE_BASE_URL}/${DOCKER_STACK_EXAMPLE_FILE} -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp portable/${DOCKER_SERVICE_FILE}        ${OSS_PORTABLE_BASE_URL}/${DOCKER_SERVICE_FILE}       -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp portable/${DOWNLOAD_PORTABLE_FILE}     ${OSS_PORTABLE_BASE_URL}/${DOWNLOAD_PORTABLE_FILE}    -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp portable/${RUN_PORTABLE_FILE}          ${OSS_PORTABLE_BASE_URL}/${RUN_PORTABLE_FILE}         -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp portable/${IMAGE_LIST_FILE_X86_64}     ${OSS_PORTABLE_BASE_URL}/x86_64/${IMAGE_LIST_FILE}    -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp portable/${IMAGE_LIST_FILE_AARCH64}    ${OSS_PORTABLE_BASE_URL}/aarch64/${IMAGE_LIST_FILE}   -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    - tools/ossutil64 cp ${VERSION_FILE}                        ${OSS_PORTABLE_BASE_URL}/${VERSION_FILE}              -f -e ${ZY_STATIC_OSS_ENDPOINT} -i ${ZY_STATIC_OSS_AK_ID} -k ${ZY_STATIC_OSS_AK_SECRET}
    # 刷新 CDN 缓存
    - pip install -r tools/requirements.txt
    - python tools/cdn-refresh-tool.py Directory ${CDN_REFRESH_PATH}
      -i ${ZY_STATIC_OSS_AK_ID}
      -k ${ZY_STATIC_OSS_AK_SECRET}
  tags:
    - cloudcare-multiarch

# ========== 部署 ==========
guanceK8s_testing:
  stage: deploy
  only:
    - dev
  script:
    - for workload in ${WORKLOADS}; do
        curl -sS -X POST -H "Authorization:Bearer ${RANCHER_TOKEN}" ${RANCHER_API_BASE_URL}/v3/project/${PROJECT_ID}/workloads/deployment:${workload}?action=redeploy;
      done
  tags:
    - cloudcare-multiarch

guanceK8s_release:
  stage: deploy
  only:
    - /^deploy_\d+$/
  script:
    - sh deploy-guance.sh -d
  tags:
    - cloudcare-multiarch
